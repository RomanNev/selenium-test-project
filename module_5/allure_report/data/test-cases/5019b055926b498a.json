{
  "uid" : "5019b055926b498a",
  "name" : "test_guest_can_add_product_to_basket[offer7]",
  "fullName" : "module_5.test_product_page.TestProductPage#test_guest_can_add_product_to_basket",
  "historyId" : "8433857a769ecd2ca3eba03399b040cb",
  "time" : {
    "start" : 1624279874844,
    "stop" : 1624279877505,
    "duration" : 2661
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nAssertionError: name of the products did not match",
  "statusTrace" : "self = <module_5.test_product_page.TestProductPage object at 0x000001D5339ECFC8>, browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c5c773987cc2601497cfd4db0d605998\")>\npromo_offer = 'offer7'\n\n    @pytest.mark.parametrize('promo_offer',\n                             [\"offer0\", \"offer1\", \"offer2\", \"offer3\", \"offer4\", \"offer5\", \"offer6\",\n                              pytest.param(\"offer7\", marks=pytest.mark.xfail), \"offer8\",\n                              \"offer9\"])\n    def test_guest_can_add_product_to_basket(self, browser, promo_offer):\n        link = f\"http://selenium1py.pythonanywhere.com/catalogue/coders-at-work_207/?promo={promo_offer}\"\n        page = ProductPage(browser, link)\n        page.open()\n        page.add_to_basket_product()\n        page.solve_quiz_and_get_code()\n        page.should_be_message_adding_item_to_the_cart()\n        page.should_be_message_about_the_price_in_the_basked()\n>       page.product_name_check()\n\nmodule_5\\test_product_page.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <module_5.pages.product_page.ProductPage object at 0x000001D533A22108>\n\n    def product_name_check(self):\n        product_name = self.get_text_element(*ProductPageLocators.PRODUCT_NAME)\n        product_name_addition = self.get_text_element(*ProductPageLocators.NAME_PRODUCT_ADDITION)\n>       assert product_name == product_name_addition, \"name of the products did not match\"\nE       AssertionError: name of the products did not match\n\nmodule_5\\pages\\product_page.py:13: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "browser",
    "time" : {
      "start" : 1624279873621,
      "stop" : 1624279874843,
      "duration" : 1222
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nAssertionError: name of the products did not match",
    "statusTrace" : "self = <module_5.test_product_page.TestProductPage object at 0x000001D5339ECFC8>, browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c5c773987cc2601497cfd4db0d605998\")>\npromo_offer = 'offer7'\n\n    @pytest.mark.parametrize('promo_offer',\n                             [\"offer0\", \"offer1\", \"offer2\", \"offer3\", \"offer4\", \"offer5\", \"offer6\",\n                              pytest.param(\"offer7\", marks=pytest.mark.xfail), \"offer8\",\n                              \"offer9\"])\n    def test_guest_can_add_product_to_basket(self, browser, promo_offer):\n        link = f\"http://selenium1py.pythonanywhere.com/catalogue/coders-at-work_207/?promo={promo_offer}\"\n        page = ProductPage(browser, link)\n        page.open()\n        page.add_to_basket_product()\n        page.solve_quiz_and_get_code()\n        page.should_be_message_adding_item_to_the_cart()\n        page.should_be_message_about_the_price_in_the_basked()\n>       page.product_name_check()\n\nmodule_5\\test_product_page.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <module_5.pages.product_page.ProductPage object at 0x000001D533A22108>\n\n    def product_name_check(self):\n        product_name = self.get_text_element(*ProductPageLocators.PRODUCT_NAME)\n        product_name_addition = self.get_text_element(*ProductPageLocators.NAME_PRODUCT_ADDITION)\n>       assert product_name == product_name_addition, \"name of the products did not match\"\nE       AssertionError: name of the products did not match\n\nmodule_5\\pages\\product_page.py:13: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "85986a36a9708a1c",
      "name" : "stdout",
      "source" : "85986a36a9708a1c.txt",
      "type" : "text/plain",
      "size" : 75
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "browser::0",
    "time" : {
      "start" : 1624279877564,
      "stop" : 1624279881719,
      "duration" : 4155
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "module_5"
  }, {
    "name" : "suite",
    "value" : "test_product_page"
  }, {
    "name" : "subSuite",
    "value" : "TestProductPage"
  }, {
    "name" : "host",
    "value" : "NOTEBOOK"
  }, {
    "name" : "thread",
    "value" : "8776-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "module_5.test_product_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "promo_offer",
    "value" : "'offer7'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "5019b055926b498a.json",
  "parameterValues" : [ "'offer7'" ]
}